// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: demuxer.proto

#ifndef PROTOBUF_INCLUDED_demuxer_2eproto
#define PROTOBUF_INCLUDED_demuxer_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_demuxer_2eproto 

namespace protobuf_demuxer_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_demuxer_2eproto
class audio_params;
class audio_paramsDefaultTypeInternal;
extern audio_paramsDefaultTypeInternal _audio_params_default_instance_;
class av_packet;
class av_packetDefaultTypeInternal;
extern av_packetDefaultTypeInternal _av_packet_default_instance_;
class data_packet;
class data_packetDefaultTypeInternal;
extern data_packetDefaultTypeInternal _data_packet_default_instance_;
class video_params;
class video_paramsDefaultTypeInternal;
extern video_paramsDefaultTypeInternal _video_params_default_instance_;
namespace google {
namespace protobuf {
template<> ::audio_params* Arena::CreateMaybeMessage<::audio_params>(Arena*);
template<> ::av_packet* Arena::CreateMaybeMessage<::av_packet>(Arena*);
template<> ::data_packet* Arena::CreateMaybeMessage<::data_packet>(Arena*);
template<> ::video_params* Arena::CreateMaybeMessage<::video_params>(Arena*);
}  // namespace protobuf
}  // namespace google

enum av_packet_av_type {
  av_packet_av_type_VIDEO = 0,
  av_packet_av_type_AUDIO = 1
};
bool av_packet_av_type_IsValid(int value);
const av_packet_av_type av_packet_av_type_av_type_MIN = av_packet_av_type_VIDEO;
const av_packet_av_type av_packet_av_type_av_type_MAX = av_packet_av_type_AUDIO;
const int av_packet_av_type_av_type_ARRAYSIZE = av_packet_av_type_av_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* av_packet_av_type_descriptor();
inline const ::std::string& av_packet_av_type_Name(av_packet_av_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    av_packet_av_type_descriptor(), value);
}
inline bool av_packet_av_type_Parse(
    const ::std::string& name, av_packet_av_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<av_packet_av_type>(
    av_packet_av_type_descriptor(), name, value);
}
// ===================================================================

class av_packet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:av_packet) */ {
 public:
  av_packet();
  virtual ~av_packet();

  av_packet(const av_packet& from);

  inline av_packet& operator=(const av_packet& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  av_packet(av_packet&& from) noexcept
    : av_packet() {
    *this = ::std::move(from);
  }

  inline av_packet& operator=(av_packet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const av_packet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const av_packet* internal_default_instance() {
    return reinterpret_cast<const av_packet*>(
               &_av_packet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(av_packet* other);
  friend void swap(av_packet& a, av_packet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline av_packet* New() const final {
    return CreateMaybeMessage<av_packet>(NULL);
  }

  av_packet* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<av_packet>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const av_packet& from);
  void MergeFrom(const av_packet& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(av_packet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef av_packet_av_type av_type;
  static const av_type VIDEO =
    av_packet_av_type_VIDEO;
  static const av_type AUDIO =
    av_packet_av_type_AUDIO;
  static inline bool av_type_IsValid(int value) {
    return av_packet_av_type_IsValid(value);
  }
  static const av_type av_type_MIN =
    av_packet_av_type_av_type_MIN;
  static const av_type av_type_MAX =
    av_packet_av_type_av_type_MAX;
  static const int av_type_ARRAYSIZE =
    av_packet_av_type_av_type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  av_type_descriptor() {
    return av_packet_av_type_descriptor();
  }
  static inline const ::std::string& av_type_Name(av_type value) {
    return av_packet_av_type_Name(value);
  }
  static inline bool av_type_Parse(const ::std::string& name,
      av_type* value) {
    return av_packet_av_type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required bytes data = 3;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // required int32 pts = 1;
  bool has_pts() const;
  void clear_pts();
  static const int kPtsFieldNumber = 1;
  ::google::protobuf::int32 pts() const;
  void set_pts(::google::protobuf::int32 value);

  // required int32 dts = 2;
  bool has_dts() const;
  void clear_dts();
  static const int kDtsFieldNumber = 2;
  ::google::protobuf::int32 dts() const;
  void set_dts(::google::protobuf::int32 value);

  // required .av_packet.av_type type = 4;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 4;
  ::av_packet_av_type type() const;
  void set_type(::av_packet_av_type value);

  // @@protoc_insertion_point(class_scope:av_packet)
 private:
  void set_has_pts();
  void clear_has_pts();
  void set_has_dts();
  void clear_has_dts();
  void set_has_data();
  void clear_has_data();
  void set_has_type();
  void clear_has_type();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::int32 pts_;
  ::google::protobuf::int32 dts_;
  int type_;
  friend struct ::protobuf_demuxer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class video_params : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:video_params) */ {
 public:
  video_params();
  virtual ~video_params();

  video_params(const video_params& from);

  inline video_params& operator=(const video_params& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  video_params(video_params&& from) noexcept
    : video_params() {
    *this = ::std::move(from);
  }

  inline video_params& operator=(video_params&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const video_params& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const video_params* internal_default_instance() {
    return reinterpret_cast<const video_params*>(
               &_video_params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(video_params* other);
  friend void swap(video_params& a, video_params& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline video_params* New() const final {
    return CreateMaybeMessage<video_params>(NULL);
  }

  video_params* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<video_params>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const video_params& from);
  void MergeFrom(const video_params& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(video_params* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes pps_sps = 5;
  bool has_pps_sps() const;
  void clear_pps_sps();
  static const int kPpsSpsFieldNumber = 5;
  const ::std::string& pps_sps() const;
  void set_pps_sps(const ::std::string& value);
  #if LANG_CXX11
  void set_pps_sps(::std::string&& value);
  #endif
  void set_pps_sps(const char* value);
  void set_pps_sps(const void* value, size_t size);
  ::std::string* mutable_pps_sps();
  ::std::string* release_pps_sps();
  void set_allocated_pps_sps(::std::string* pps_sps);

  // required int32 width = 1;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 1;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // required int32 height = 2;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 2;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // required int32 bit_rate = 3;
  bool has_bit_rate() const;
  void clear_bit_rate();
  static const int kBitRateFieldNumber = 3;
  ::google::protobuf::int32 bit_rate() const;
  void set_bit_rate(::google::protobuf::int32 value);

  // required int32 framerate_numerator = 4;
  bool has_framerate_numerator() const;
  void clear_framerate_numerator();
  static const int kFramerateNumeratorFieldNumber = 4;
  ::google::protobuf::int32 framerate_numerator() const;
  void set_framerate_numerator(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:video_params)
 private:
  void set_has_width();
  void clear_has_width();
  void set_has_height();
  void clear_has_height();
  void set_has_bit_rate();
  void clear_has_bit_rate();
  void set_has_framerate_numerator();
  void clear_has_framerate_numerator();
  void set_has_pps_sps();
  void clear_has_pps_sps();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr pps_sps_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::int32 bit_rate_;
  ::google::protobuf::int32 framerate_numerator_;
  friend struct ::protobuf_demuxer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class audio_params : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:audio_params) */ {
 public:
  audio_params();
  virtual ~audio_params();

  audio_params(const audio_params& from);

  inline audio_params& operator=(const audio_params& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  audio_params(audio_params&& from) noexcept
    : audio_params() {
    *this = ::std::move(from);
  }

  inline audio_params& operator=(audio_params&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const audio_params& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const audio_params* internal_default_instance() {
    return reinterpret_cast<const audio_params*>(
               &_audio_params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(audio_params* other);
  friend void swap(audio_params& a, audio_params& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline audio_params* New() const final {
    return CreateMaybeMessage<audio_params>(NULL);
  }

  audio_params* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<audio_params>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const audio_params& from);
  void MergeFrom(const audio_params& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(audio_params* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 bit_rate = 1;
  bool has_bit_rate() const;
  void clear_bit_rate();
  static const int kBitRateFieldNumber = 1;
  ::google::protobuf::int32 bit_rate() const;
  void set_bit_rate(::google::protobuf::int32 value);

  // required int32 sample_rate = 2;
  bool has_sample_rate() const;
  void clear_sample_rate();
  static const int kSampleRateFieldNumber = 2;
  ::google::protobuf::int32 sample_rate() const;
  void set_sample_rate(::google::protobuf::int32 value);

  // required int64 channel_layout = 4;
  bool has_channel_layout() const;
  void clear_channel_layout();
  static const int kChannelLayoutFieldNumber = 4;
  ::google::protobuf::int64 channel_layout() const;
  void set_channel_layout(::google::protobuf::int64 value);

  // required int32 channel_count = 3;
  bool has_channel_count() const;
  void clear_channel_count();
  static const int kChannelCountFieldNumber = 3;
  ::google::protobuf::int32 channel_count() const;
  void set_channel_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:audio_params)
 private:
  void set_has_bit_rate();
  void clear_has_bit_rate();
  void set_has_sample_rate();
  void clear_has_sample_rate();
  void set_has_channel_count();
  void clear_has_channel_count();
  void set_has_channel_layout();
  void clear_has_channel_layout();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 bit_rate_;
  ::google::protobuf::int32 sample_rate_;
  ::google::protobuf::int64 channel_layout_;
  ::google::protobuf::int32 channel_count_;
  friend struct ::protobuf_demuxer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class data_packet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:data_packet) */ {
 public:
  data_packet();
  virtual ~data_packet();

  data_packet(const data_packet& from);

  inline data_packet& operator=(const data_packet& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  data_packet(data_packet&& from) noexcept
    : data_packet() {
    *this = ::std::move(from);
  }

  inline data_packet& operator=(data_packet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const data_packet& default_instance();

  enum DataOptionCase {
    kAvData = 1,
    kAParams = 2,
    kVParams = 3,
    DATA_OPTION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const data_packet* internal_default_instance() {
    return reinterpret_cast<const data_packet*>(
               &_data_packet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(data_packet* other);
  friend void swap(data_packet& a, data_packet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline data_packet* New() const final {
    return CreateMaybeMessage<data_packet>(NULL);
  }

  data_packet* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<data_packet>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const data_packet& from);
  void MergeFrom(const data_packet& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(data_packet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .av_packet av_data = 1;
  bool has_av_data() const;
  void clear_av_data();
  static const int kAvDataFieldNumber = 1;
  private:
  const ::av_packet& _internal_av_data() const;
  public:
  const ::av_packet& av_data() const;
  ::av_packet* release_av_data();
  ::av_packet* mutable_av_data();
  void set_allocated_av_data(::av_packet* av_data);

  // optional .audio_params a_params = 2;
  bool has_a_params() const;
  void clear_a_params();
  static const int kAParamsFieldNumber = 2;
  private:
  const ::audio_params& _internal_a_params() const;
  public:
  const ::audio_params& a_params() const;
  ::audio_params* release_a_params();
  ::audio_params* mutable_a_params();
  void set_allocated_a_params(::audio_params* a_params);

  // optional .video_params v_params = 3;
  bool has_v_params() const;
  void clear_v_params();
  static const int kVParamsFieldNumber = 3;
  private:
  const ::video_params& _internal_v_params() const;
  public:
  const ::video_params& v_params() const;
  ::video_params* release_v_params();
  ::video_params* mutable_v_params();
  void set_allocated_v_params(::video_params* v_params);

  void clear_data_option();
  DataOptionCase data_option_case() const;
  // @@protoc_insertion_point(class_scope:data_packet)
 private:
  void set_has_av_data();
  void set_has_a_params();
  void set_has_v_params();

  inline bool has_data_option() const;
  inline void clear_has_data_option();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  union DataOptionUnion {
    DataOptionUnion() {}
    ::av_packet* av_data_;
    ::audio_params* a_params_;
    ::video_params* v_params_;
  } data_option_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_demuxer_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// av_packet

// required int32 pts = 1;
inline bool av_packet::has_pts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void av_packet::set_has_pts() {
  _has_bits_[0] |= 0x00000002u;
}
inline void av_packet::clear_has_pts() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void av_packet::clear_pts() {
  pts_ = 0;
  clear_has_pts();
}
inline ::google::protobuf::int32 av_packet::pts() const {
  // @@protoc_insertion_point(field_get:av_packet.pts)
  return pts_;
}
inline void av_packet::set_pts(::google::protobuf::int32 value) {
  set_has_pts();
  pts_ = value;
  // @@protoc_insertion_point(field_set:av_packet.pts)
}

// required int32 dts = 2;
inline bool av_packet::has_dts() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void av_packet::set_has_dts() {
  _has_bits_[0] |= 0x00000004u;
}
inline void av_packet::clear_has_dts() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void av_packet::clear_dts() {
  dts_ = 0;
  clear_has_dts();
}
inline ::google::protobuf::int32 av_packet::dts() const {
  // @@protoc_insertion_point(field_get:av_packet.dts)
  return dts_;
}
inline void av_packet::set_dts(::google::protobuf::int32 value) {
  set_has_dts();
  dts_ = value;
  // @@protoc_insertion_point(field_set:av_packet.dts)
}

// required bytes data = 3;
inline bool av_packet::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void av_packet::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void av_packet::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void av_packet::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& av_packet::data() const {
  // @@protoc_insertion_point(field_get:av_packet.data)
  return data_.GetNoArena();
}
inline void av_packet::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:av_packet.data)
}
#if LANG_CXX11
inline void av_packet::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:av_packet.data)
}
#endif
inline void av_packet::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:av_packet.data)
}
inline void av_packet::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:av_packet.data)
}
inline ::std::string* av_packet::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:av_packet.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* av_packet::release_data() {
  // @@protoc_insertion_point(field_release:av_packet.data)
  if (!has_data()) {
    return NULL;
  }
  clear_has_data();
  return data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void av_packet::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:av_packet.data)
}

// required .av_packet.av_type type = 4;
inline bool av_packet::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void av_packet::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void av_packet::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void av_packet::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::av_packet_av_type av_packet::type() const {
  // @@protoc_insertion_point(field_get:av_packet.type)
  return static_cast< ::av_packet_av_type >(type_);
}
inline void av_packet::set_type(::av_packet_av_type value) {
  assert(::av_packet_av_type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:av_packet.type)
}

// -------------------------------------------------------------------

// video_params

// required int32 width = 1;
inline bool video_params::has_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void video_params::set_has_width() {
  _has_bits_[0] |= 0x00000002u;
}
inline void video_params::clear_has_width() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void video_params::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 video_params::width() const {
  // @@protoc_insertion_point(field_get:video_params.width)
  return width_;
}
inline void video_params::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:video_params.width)
}

// required int32 height = 2;
inline bool video_params::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void video_params::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void video_params::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void video_params::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 video_params::height() const {
  // @@protoc_insertion_point(field_get:video_params.height)
  return height_;
}
inline void video_params::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:video_params.height)
}

// required int32 bit_rate = 3;
inline bool video_params::has_bit_rate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void video_params::set_has_bit_rate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void video_params::clear_has_bit_rate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void video_params::clear_bit_rate() {
  bit_rate_ = 0;
  clear_has_bit_rate();
}
inline ::google::protobuf::int32 video_params::bit_rate() const {
  // @@protoc_insertion_point(field_get:video_params.bit_rate)
  return bit_rate_;
}
inline void video_params::set_bit_rate(::google::protobuf::int32 value) {
  set_has_bit_rate();
  bit_rate_ = value;
  // @@protoc_insertion_point(field_set:video_params.bit_rate)
}

// required int32 framerate_numerator = 4;
inline bool video_params::has_framerate_numerator() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void video_params::set_has_framerate_numerator() {
  _has_bits_[0] |= 0x00000010u;
}
inline void video_params::clear_has_framerate_numerator() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void video_params::clear_framerate_numerator() {
  framerate_numerator_ = 0;
  clear_has_framerate_numerator();
}
inline ::google::protobuf::int32 video_params::framerate_numerator() const {
  // @@protoc_insertion_point(field_get:video_params.framerate_numerator)
  return framerate_numerator_;
}
inline void video_params::set_framerate_numerator(::google::protobuf::int32 value) {
  set_has_framerate_numerator();
  framerate_numerator_ = value;
  // @@protoc_insertion_point(field_set:video_params.framerate_numerator)
}

// required bytes pps_sps = 5;
inline bool video_params::has_pps_sps() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void video_params::set_has_pps_sps() {
  _has_bits_[0] |= 0x00000001u;
}
inline void video_params::clear_has_pps_sps() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void video_params::clear_pps_sps() {
  pps_sps_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pps_sps();
}
inline const ::std::string& video_params::pps_sps() const {
  // @@protoc_insertion_point(field_get:video_params.pps_sps)
  return pps_sps_.GetNoArena();
}
inline void video_params::set_pps_sps(const ::std::string& value) {
  set_has_pps_sps();
  pps_sps_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:video_params.pps_sps)
}
#if LANG_CXX11
inline void video_params::set_pps_sps(::std::string&& value) {
  set_has_pps_sps();
  pps_sps_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:video_params.pps_sps)
}
#endif
inline void video_params::set_pps_sps(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pps_sps();
  pps_sps_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:video_params.pps_sps)
}
inline void video_params::set_pps_sps(const void* value, size_t size) {
  set_has_pps_sps();
  pps_sps_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:video_params.pps_sps)
}
inline ::std::string* video_params::mutable_pps_sps() {
  set_has_pps_sps();
  // @@protoc_insertion_point(field_mutable:video_params.pps_sps)
  return pps_sps_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* video_params::release_pps_sps() {
  // @@protoc_insertion_point(field_release:video_params.pps_sps)
  if (!has_pps_sps()) {
    return NULL;
  }
  clear_has_pps_sps();
  return pps_sps_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void video_params::set_allocated_pps_sps(::std::string* pps_sps) {
  if (pps_sps != NULL) {
    set_has_pps_sps();
  } else {
    clear_has_pps_sps();
  }
  pps_sps_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pps_sps);
  // @@protoc_insertion_point(field_set_allocated:video_params.pps_sps)
}

// -------------------------------------------------------------------

// audio_params

// required int32 bit_rate = 1;
inline bool audio_params::has_bit_rate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void audio_params::set_has_bit_rate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void audio_params::clear_has_bit_rate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void audio_params::clear_bit_rate() {
  bit_rate_ = 0;
  clear_has_bit_rate();
}
inline ::google::protobuf::int32 audio_params::bit_rate() const {
  // @@protoc_insertion_point(field_get:audio_params.bit_rate)
  return bit_rate_;
}
inline void audio_params::set_bit_rate(::google::protobuf::int32 value) {
  set_has_bit_rate();
  bit_rate_ = value;
  // @@protoc_insertion_point(field_set:audio_params.bit_rate)
}

// required int32 sample_rate = 2;
inline bool audio_params::has_sample_rate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void audio_params::set_has_sample_rate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void audio_params::clear_has_sample_rate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void audio_params::clear_sample_rate() {
  sample_rate_ = 0;
  clear_has_sample_rate();
}
inline ::google::protobuf::int32 audio_params::sample_rate() const {
  // @@protoc_insertion_point(field_get:audio_params.sample_rate)
  return sample_rate_;
}
inline void audio_params::set_sample_rate(::google::protobuf::int32 value) {
  set_has_sample_rate();
  sample_rate_ = value;
  // @@protoc_insertion_point(field_set:audio_params.sample_rate)
}

// required int32 channel_count = 3;
inline bool audio_params::has_channel_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void audio_params::set_has_channel_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void audio_params::clear_has_channel_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void audio_params::clear_channel_count() {
  channel_count_ = 0;
  clear_has_channel_count();
}
inline ::google::protobuf::int32 audio_params::channel_count() const {
  // @@protoc_insertion_point(field_get:audio_params.channel_count)
  return channel_count_;
}
inline void audio_params::set_channel_count(::google::protobuf::int32 value) {
  set_has_channel_count();
  channel_count_ = value;
  // @@protoc_insertion_point(field_set:audio_params.channel_count)
}

// required int64 channel_layout = 4;
inline bool audio_params::has_channel_layout() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void audio_params::set_has_channel_layout() {
  _has_bits_[0] |= 0x00000004u;
}
inline void audio_params::clear_has_channel_layout() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void audio_params::clear_channel_layout() {
  channel_layout_ = GOOGLE_LONGLONG(0);
  clear_has_channel_layout();
}
inline ::google::protobuf::int64 audio_params::channel_layout() const {
  // @@protoc_insertion_point(field_get:audio_params.channel_layout)
  return channel_layout_;
}
inline void audio_params::set_channel_layout(::google::protobuf::int64 value) {
  set_has_channel_layout();
  channel_layout_ = value;
  // @@protoc_insertion_point(field_set:audio_params.channel_layout)
}

// -------------------------------------------------------------------

// data_packet

// optional .av_packet av_data = 1;
inline bool data_packet::has_av_data() const {
  return data_option_case() == kAvData;
}
inline void data_packet::set_has_av_data() {
  _oneof_case_[0] = kAvData;
}
inline void data_packet::clear_av_data() {
  if (has_av_data()) {
    delete data_option_.av_data_;
    clear_has_data_option();
  }
}
inline const ::av_packet& data_packet::_internal_av_data() const {
  return *data_option_.av_data_;
}
inline ::av_packet* data_packet::release_av_data() {
  // @@protoc_insertion_point(field_release:data_packet.av_data)
  if (has_av_data()) {
    clear_has_data_option();
      ::av_packet* temp = data_option_.av_data_;
    data_option_.av_data_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::av_packet& data_packet::av_data() const {
  // @@protoc_insertion_point(field_get:data_packet.av_data)
  return has_av_data()
      ? *data_option_.av_data_
      : *reinterpret_cast< ::av_packet*>(&::_av_packet_default_instance_);
}
inline ::av_packet* data_packet::mutable_av_data() {
  if (!has_av_data()) {
    clear_data_option();
    set_has_av_data();
    data_option_.av_data_ = CreateMaybeMessage< ::av_packet >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:data_packet.av_data)
  return data_option_.av_data_;
}

// optional .audio_params a_params = 2;
inline bool data_packet::has_a_params() const {
  return data_option_case() == kAParams;
}
inline void data_packet::set_has_a_params() {
  _oneof_case_[0] = kAParams;
}
inline void data_packet::clear_a_params() {
  if (has_a_params()) {
    delete data_option_.a_params_;
    clear_has_data_option();
  }
}
inline const ::audio_params& data_packet::_internal_a_params() const {
  return *data_option_.a_params_;
}
inline ::audio_params* data_packet::release_a_params() {
  // @@protoc_insertion_point(field_release:data_packet.a_params)
  if (has_a_params()) {
    clear_has_data_option();
      ::audio_params* temp = data_option_.a_params_;
    data_option_.a_params_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::audio_params& data_packet::a_params() const {
  // @@protoc_insertion_point(field_get:data_packet.a_params)
  return has_a_params()
      ? *data_option_.a_params_
      : *reinterpret_cast< ::audio_params*>(&::_audio_params_default_instance_);
}
inline ::audio_params* data_packet::mutable_a_params() {
  if (!has_a_params()) {
    clear_data_option();
    set_has_a_params();
    data_option_.a_params_ = CreateMaybeMessage< ::audio_params >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:data_packet.a_params)
  return data_option_.a_params_;
}

// optional .video_params v_params = 3;
inline bool data_packet::has_v_params() const {
  return data_option_case() == kVParams;
}
inline void data_packet::set_has_v_params() {
  _oneof_case_[0] = kVParams;
}
inline void data_packet::clear_v_params() {
  if (has_v_params()) {
    delete data_option_.v_params_;
    clear_has_data_option();
  }
}
inline const ::video_params& data_packet::_internal_v_params() const {
  return *data_option_.v_params_;
}
inline ::video_params* data_packet::release_v_params() {
  // @@protoc_insertion_point(field_release:data_packet.v_params)
  if (has_v_params()) {
    clear_has_data_option();
      ::video_params* temp = data_option_.v_params_;
    data_option_.v_params_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::video_params& data_packet::v_params() const {
  // @@protoc_insertion_point(field_get:data_packet.v_params)
  return has_v_params()
      ? *data_option_.v_params_
      : *reinterpret_cast< ::video_params*>(&::_video_params_default_instance_);
}
inline ::video_params* data_packet::mutable_v_params() {
  if (!has_v_params()) {
    clear_data_option();
    set_has_v_params();
    data_option_.v_params_ = CreateMaybeMessage< ::video_params >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:data_packet.v_params)
  return data_option_.v_params_;
}

inline bool data_packet::has_data_option() const {
  return data_option_case() != DATA_OPTION_NOT_SET;
}
inline void data_packet::clear_has_data_option() {
  _oneof_case_[0] = DATA_OPTION_NOT_SET;
}
inline data_packet::DataOptionCase data_packet::data_option_case() const {
  return data_packet::DataOptionCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::av_packet_av_type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::av_packet_av_type>() {
  return ::av_packet_av_type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_demuxer_2eproto
