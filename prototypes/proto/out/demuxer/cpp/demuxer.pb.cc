// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: demuxer.proto

#include "demuxer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_demuxer_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_demuxer_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_audio_params;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_demuxer_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_av_packet;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_demuxer_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_video_params;
}  // namespace protobuf_demuxer_2eproto
class av_packetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<av_packet>
      _instance;
} _av_packet_default_instance_;
class video_paramsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<video_params>
      _instance;
} _video_params_default_instance_;
class audio_paramsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<audio_params>
      _instance;
} _audio_params_default_instance_;
class data_packetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<data_packet>
      _instance;
  const ::av_packet* av_data_;
  const ::audio_params* a_params_;
  const ::video_params* v_params_;
} _data_packet_default_instance_;
namespace protobuf_demuxer_2eproto {
static void InitDefaultsav_packet() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_av_packet_default_instance_;
    new (ptr) ::av_packet();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::av_packet::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_av_packet =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsav_packet}, {}};

static void InitDefaultsvideo_params() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_video_params_default_instance_;
    new (ptr) ::video_params();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::video_params::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_video_params =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsvideo_params}, {}};

static void InitDefaultsaudio_params() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_audio_params_default_instance_;
    new (ptr) ::audio_params();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::audio_params::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_audio_params =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsaudio_params}, {}};

static void InitDefaultsdata_packet() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_data_packet_default_instance_;
    new (ptr) ::data_packet();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::data_packet::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_data_packet =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsdata_packet}, {
      &protobuf_demuxer_2eproto::scc_info_av_packet.base,
      &protobuf_demuxer_2eproto::scc_info_audio_params.base,
      &protobuf_demuxer_2eproto::scc_info_video_params.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_av_packet.base);
  ::google::protobuf::internal::InitSCC(&scc_info_video_params.base);
  ::google::protobuf::internal::InitSCC(&scc_info_audio_params.base);
  ::google::protobuf::internal::InitSCC(&scc_info_data_packet.base);
}

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::av_packet, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::av_packet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::av_packet, pts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::av_packet, dts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::av_packet, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::av_packet, type_),
  1,
  2,
  0,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::video_params, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::video_params, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::video_params, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::video_params, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::video_params, bit_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::video_params, framerate_numerator_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::video_params, pps_sps_),
  1,
  2,
  3,
  4,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::audio_params, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::audio_params, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::audio_params, bit_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::audio_params, sample_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::audio_params, channel_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::audio_params, channel_layout_),
  0,
  1,
  3,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::data_packet, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::data_packet, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::data_packet, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::data_packetDefaultTypeInternal, av_data_),
  offsetof(::data_packetDefaultTypeInternal, a_params_),
  offsetof(::data_packetDefaultTypeInternal, v_params_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::data_packet, data_option_),
  ~0u,
  ~0u,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::av_packet)},
  { 13, 23, sizeof(::video_params)},
  { 28, 37, sizeof(::audio_params)},
  { 41, 50, sizeof(::data_packet)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_av_packet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_video_params_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_audio_params_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_data_packet_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "demuxer.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rdemuxer.proto\"v\n\tav_packet\022\013\n\003pts\030\001 \002("
      "\005\022\013\n\003dts\030\002 \002(\005\022\014\n\004data\030\003 \002(\014\022 \n\004type\030\004 \002"
      "(\0162\022.av_packet.av_type\"\037\n\007av_type\022\t\n\005VID"
      "EO\020\000\022\t\n\005AUDIO\020\001\"m\n\014video_params\022\r\n\005width"
      "\030\001 \002(\005\022\016\n\006height\030\002 \002(\005\022\020\n\010bit_rate\030\003 \002(\005"
      "\022\033\n\023framerate_numerator\030\004 \002(\005\022\017\n\007pps_sps"
      "\030\005 \002(\014\"d\n\014audio_params\022\020\n\010bit_rate\030\001 \002(\005"
      "\022\023\n\013sample_rate\030\002 \002(\005\022\025\n\rchannel_count\030\003"
      " \002(\005\022\026\n\016channel_layout\030\004 \002(\003\"\201\001\n\013data_pa"
      "cket\022\035\n\007av_data\030\001 \001(\0132\n.av_packetH\000\022!\n\010a"
      "_params\030\002 \001(\0132\r.audio_paramsH\000\022!\n\010v_para"
      "ms\030\003 \001(\0132\r.video_paramsH\000B\r\n\013data_option"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 480);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "demuxer.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_demuxer_2eproto
const ::google::protobuf::EnumDescriptor* av_packet_av_type_descriptor() {
  protobuf_demuxer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_demuxer_2eproto::file_level_enum_descriptors[0];
}
bool av_packet_av_type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const av_packet_av_type av_packet::VIDEO;
const av_packet_av_type av_packet::AUDIO;
const av_packet_av_type av_packet::av_type_MIN;
const av_packet_av_type av_packet::av_type_MAX;
const int av_packet::av_type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void av_packet::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int av_packet::kPtsFieldNumber;
const int av_packet::kDtsFieldNumber;
const int av_packet::kDataFieldNumber;
const int av_packet::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

av_packet::av_packet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_demuxer_2eproto::scc_info_av_packet.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:av_packet)
}
av_packet::av_packet(const av_packet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&pts_, &from.pts_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&pts_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:av_packet)
}

void av_packet::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&pts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&pts_)) + sizeof(type_));
}

av_packet::~av_packet() {
  // @@protoc_insertion_point(destructor:av_packet)
  SharedDtor();
}

void av_packet::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void av_packet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* av_packet::descriptor() {
  ::protobuf_demuxer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_demuxer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const av_packet& av_packet::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_demuxer_2eproto::scc_info_av_packet.base);
  return *internal_default_instance();
}


void av_packet::Clear() {
// @@protoc_insertion_point(message_clear_start:av_packet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 14u) {
    ::memset(&pts_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&pts_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool av_packet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:av_packet)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 pts = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_pts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 dts = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_dts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .av_packet.av_type type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::av_packet_av_type_IsValid(value)) {
            set_type(static_cast< ::av_packet_av_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:av_packet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:av_packet)
  return false;
#undef DO_
}

void av_packet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:av_packet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 pts = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pts(), output);
  }

  // required int32 dts = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dts(), output);
  }

  // required bytes data = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  // required .av_packet.av_type type = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:av_packet)
}

::google::protobuf::uint8* av_packet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:av_packet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 pts = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pts(), target);
  }

  // required int32 dts = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dts(), target);
  }

  // required bytes data = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  // required .av_packet.av_type type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:av_packet)
  return target;
}

size_t av_packet::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:av_packet)
  size_t total_size = 0;

  if (has_data()) {
    // required bytes data = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  if (has_pts()) {
    // required int32 pts = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pts());
  }

  if (has_dts()) {
    // required int32 dts = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dts());
  }

  if (has_type()) {
    // required .av_packet.av_type type = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  return total_size;
}
size_t av_packet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:av_packet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required bytes data = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());

    // required int32 pts = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pts());

    // required int32 dts = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dts());

    // required .av_packet.av_type type = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void av_packet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:av_packet)
  GOOGLE_DCHECK_NE(&from, this);
  const av_packet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const av_packet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:av_packet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:av_packet)
    MergeFrom(*source);
  }
}

void av_packet::MergeFrom(const av_packet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:av_packet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      pts_ = from.pts_;
    }
    if (cached_has_bits & 0x00000004u) {
      dts_ = from.dts_;
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void av_packet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:av_packet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void av_packet::CopyFrom(const av_packet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:av_packet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool av_packet::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void av_packet::Swap(av_packet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void av_packet::InternalSwap(av_packet* other) {
  using std::swap;
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pts_, other->pts_);
  swap(dts_, other->dts_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata av_packet::GetMetadata() const {
  protobuf_demuxer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_demuxer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void video_params::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int video_params::kWidthFieldNumber;
const int video_params::kHeightFieldNumber;
const int video_params::kBitRateFieldNumber;
const int video_params::kFramerateNumeratorFieldNumber;
const int video_params::kPpsSpsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

video_params::video_params()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_demuxer_2eproto::scc_info_video_params.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:video_params)
}
video_params::video_params(const video_params& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pps_sps_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pps_sps()) {
    pps_sps_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pps_sps_);
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&framerate_numerator_) -
    reinterpret_cast<char*>(&width_)) + sizeof(framerate_numerator_));
  // @@protoc_insertion_point(copy_constructor:video_params)
}

void video_params::SharedCtor() {
  pps_sps_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&framerate_numerator_) -
      reinterpret_cast<char*>(&width_)) + sizeof(framerate_numerator_));
}

video_params::~video_params() {
  // @@protoc_insertion_point(destructor:video_params)
  SharedDtor();
}

void video_params::SharedDtor() {
  pps_sps_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void video_params::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* video_params::descriptor() {
  ::protobuf_demuxer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_demuxer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const video_params& video_params::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_demuxer_2eproto::scc_info_video_params.base);
  return *internal_default_instance();
}


void video_params::Clear() {
// @@protoc_insertion_point(message_clear_start:video_params)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    pps_sps_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 30u) {
    ::memset(&width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&framerate_numerator_) -
        reinterpret_cast<char*>(&width_)) + sizeof(framerate_numerator_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool video_params::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:video_params)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 width = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 height = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 bit_rate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_bit_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bit_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 framerate_numerator = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_framerate_numerator();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &framerate_numerator_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes pps_sps = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pps_sps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:video_params)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:video_params)
  return false;
#undef DO_
}

void video_params::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:video_params)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 width = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->width(), output);
  }

  // required int32 height = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->height(), output);
  }

  // required int32 bit_rate = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bit_rate(), output);
  }

  // required int32 framerate_numerator = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->framerate_numerator(), output);
  }

  // required bytes pps_sps = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->pps_sps(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:video_params)
}

::google::protobuf::uint8* video_params::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:video_params)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 width = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->width(), target);
  }

  // required int32 height = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->height(), target);
  }

  // required int32 bit_rate = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bit_rate(), target);
  }

  // required int32 framerate_numerator = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->framerate_numerator(), target);
  }

  // required bytes pps_sps = 5;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->pps_sps(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:video_params)
  return target;
}

size_t video_params::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:video_params)
  size_t total_size = 0;

  if (has_pps_sps()) {
    // required bytes pps_sps = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pps_sps());
  }

  if (has_width()) {
    // required int32 width = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  if (has_height()) {
    // required int32 height = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  if (has_bit_rate()) {
    // required int32 bit_rate = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bit_rate());
  }

  if (has_framerate_numerator()) {
    // required int32 framerate_numerator = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->framerate_numerator());
  }

  return total_size;
}
size_t video_params::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:video_params)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required bytes pps_sps = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pps_sps());

    // required int32 width = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());

    // required int32 height = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());

    // required int32 bit_rate = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bit_rate());

    // required int32 framerate_numerator = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->framerate_numerator());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void video_params::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:video_params)
  GOOGLE_DCHECK_NE(&from, this);
  const video_params* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const video_params>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:video_params)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:video_params)
    MergeFrom(*source);
  }
}

void video_params::MergeFrom(const video_params& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:video_params)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_pps_sps();
      pps_sps_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pps_sps_);
    }
    if (cached_has_bits & 0x00000002u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000004u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000008u) {
      bit_rate_ = from.bit_rate_;
    }
    if (cached_has_bits & 0x00000010u) {
      framerate_numerator_ = from.framerate_numerator_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void video_params::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:video_params)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void video_params::CopyFrom(const video_params& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:video_params)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool video_params::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void video_params::Swap(video_params* other) {
  if (other == this) return;
  InternalSwap(other);
}
void video_params::InternalSwap(video_params* other) {
  using std::swap;
  pps_sps_.Swap(&other->pps_sps_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(bit_rate_, other->bit_rate_);
  swap(framerate_numerator_, other->framerate_numerator_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata video_params::GetMetadata() const {
  protobuf_demuxer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_demuxer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void audio_params::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int audio_params::kBitRateFieldNumber;
const int audio_params::kSampleRateFieldNumber;
const int audio_params::kChannelCountFieldNumber;
const int audio_params::kChannelLayoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

audio_params::audio_params()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_demuxer_2eproto::scc_info_audio_params.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:audio_params)
}
audio_params::audio_params(const audio_params& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bit_rate_, &from.bit_rate_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel_count_) -
    reinterpret_cast<char*>(&bit_rate_)) + sizeof(channel_count_));
  // @@protoc_insertion_point(copy_constructor:audio_params)
}

void audio_params::SharedCtor() {
  ::memset(&bit_rate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_count_) -
      reinterpret_cast<char*>(&bit_rate_)) + sizeof(channel_count_));
}

audio_params::~audio_params() {
  // @@protoc_insertion_point(destructor:audio_params)
  SharedDtor();
}

void audio_params::SharedDtor() {
}

void audio_params::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* audio_params::descriptor() {
  ::protobuf_demuxer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_demuxer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const audio_params& audio_params::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_demuxer_2eproto::scc_info_audio_params.base);
  return *internal_default_instance();
}


void audio_params::Clear() {
// @@protoc_insertion_point(message_clear_start:audio_params)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&bit_rate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&channel_count_) -
        reinterpret_cast<char*>(&bit_rate_)) + sizeof(channel_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool audio_params::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:audio_params)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 bit_rate = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_bit_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bit_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 sample_rate = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_sample_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sample_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 channel_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_channel_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 channel_layout = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_channel_layout();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &channel_layout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:audio_params)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:audio_params)
  return false;
#undef DO_
}

void audio_params::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:audio_params)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 bit_rate = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bit_rate(), output);
  }

  // required int32 sample_rate = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sample_rate(), output);
  }

  // required int32 channel_count = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->channel_count(), output);
  }

  // required int64 channel_layout = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->channel_layout(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:audio_params)
}

::google::protobuf::uint8* audio_params::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:audio_params)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 bit_rate = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bit_rate(), target);
  }

  // required int32 sample_rate = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sample_rate(), target);
  }

  // required int32 channel_count = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->channel_count(), target);
  }

  // required int64 channel_layout = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->channel_layout(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:audio_params)
  return target;
}

size_t audio_params::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:audio_params)
  size_t total_size = 0;

  if (has_bit_rate()) {
    // required int32 bit_rate = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bit_rate());
  }

  if (has_sample_rate()) {
    // required int32 sample_rate = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sample_rate());
  }

  if (has_channel_layout()) {
    // required int64 channel_layout = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->channel_layout());
  }

  if (has_channel_count()) {
    // required int32 channel_count = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->channel_count());
  }

  return total_size;
}
size_t audio_params::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:audio_params)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int32 bit_rate = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bit_rate());

    // required int32 sample_rate = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sample_rate());

    // required int64 channel_layout = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->channel_layout());

    // required int32 channel_count = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->channel_count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void audio_params::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:audio_params)
  GOOGLE_DCHECK_NE(&from, this);
  const audio_params* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const audio_params>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:audio_params)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:audio_params)
    MergeFrom(*source);
  }
}

void audio_params::MergeFrom(const audio_params& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:audio_params)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      bit_rate_ = from.bit_rate_;
    }
    if (cached_has_bits & 0x00000002u) {
      sample_rate_ = from.sample_rate_;
    }
    if (cached_has_bits & 0x00000004u) {
      channel_layout_ = from.channel_layout_;
    }
    if (cached_has_bits & 0x00000008u) {
      channel_count_ = from.channel_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void audio_params::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:audio_params)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void audio_params::CopyFrom(const audio_params& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:audio_params)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool audio_params::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void audio_params::Swap(audio_params* other) {
  if (other == this) return;
  InternalSwap(other);
}
void audio_params::InternalSwap(audio_params* other) {
  using std::swap;
  swap(bit_rate_, other->bit_rate_);
  swap(sample_rate_, other->sample_rate_);
  swap(channel_layout_, other->channel_layout_);
  swap(channel_count_, other->channel_count_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata audio_params::GetMetadata() const {
  protobuf_demuxer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_demuxer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void data_packet::InitAsDefaultInstance() {
  ::_data_packet_default_instance_.av_data_ = const_cast< ::av_packet*>(
      ::av_packet::internal_default_instance());
  ::_data_packet_default_instance_.a_params_ = const_cast< ::audio_params*>(
      ::audio_params::internal_default_instance());
  ::_data_packet_default_instance_.v_params_ = const_cast< ::video_params*>(
      ::video_params::internal_default_instance());
}
void data_packet::set_allocated_av_data(::av_packet* av_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_option();
  if (av_data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      av_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, av_data, submessage_arena);
    }
    set_has_av_data();
    data_option_.av_data_ = av_data;
  }
  // @@protoc_insertion_point(field_set_allocated:data_packet.av_data)
}
void data_packet::set_allocated_a_params(::audio_params* a_params) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_option();
  if (a_params) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      a_params = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, a_params, submessage_arena);
    }
    set_has_a_params();
    data_option_.a_params_ = a_params;
  }
  // @@protoc_insertion_point(field_set_allocated:data_packet.a_params)
}
void data_packet::set_allocated_v_params(::video_params* v_params) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_option();
  if (v_params) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      v_params = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, v_params, submessage_arena);
    }
    set_has_v_params();
    data_option_.v_params_ = v_params;
  }
  // @@protoc_insertion_point(field_set_allocated:data_packet.v_params)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int data_packet::kAvDataFieldNumber;
const int data_packet::kAParamsFieldNumber;
const int data_packet::kVParamsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

data_packet::data_packet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_demuxer_2eproto::scc_info_data_packet.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:data_packet)
}
data_packet::data_packet(const data_packet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_data_option();
  switch (from.data_option_case()) {
    case kAvData: {
      mutable_av_data()->::av_packet::MergeFrom(from.av_data());
      break;
    }
    case kAParams: {
      mutable_a_params()->::audio_params::MergeFrom(from.a_params());
      break;
    }
    case kVParams: {
      mutable_v_params()->::video_params::MergeFrom(from.v_params());
      break;
    }
    case DATA_OPTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:data_packet)
}

void data_packet::SharedCtor() {
  clear_has_data_option();
}

data_packet::~data_packet() {
  // @@protoc_insertion_point(destructor:data_packet)
  SharedDtor();
}

void data_packet::SharedDtor() {
  if (has_data_option()) {
    clear_data_option();
  }
}

void data_packet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* data_packet::descriptor() {
  ::protobuf_demuxer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_demuxer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const data_packet& data_packet::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_demuxer_2eproto::scc_info_data_packet.base);
  return *internal_default_instance();
}


void data_packet::clear_data_option() {
// @@protoc_insertion_point(one_of_clear_start:data_packet)
  switch (data_option_case()) {
    case kAvData: {
      delete data_option_.av_data_;
      break;
    }
    case kAParams: {
      delete data_option_.a_params_;
      break;
    }
    case kVParams: {
      delete data_option_.v_params_;
      break;
    }
    case DATA_OPTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_OPTION_NOT_SET;
}


void data_packet::Clear() {
// @@protoc_insertion_point(message_clear_start:data_packet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_data_option();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool data_packet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:data_packet)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .av_packet av_data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_av_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .audio_params a_params = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_a_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .video_params v_params = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_v_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:data_packet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:data_packet)
  return false;
#undef DO_
}

void data_packet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:data_packet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (data_option_case()) {
    case kAvData:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, this->_internal_av_data(), output);
      break;
    case kAParams:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, this->_internal_a_params(), output);
      break;
    case kVParams:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, this->_internal_v_params(), output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:data_packet)
}

::google::protobuf::uint8* data_packet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:data_packet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (data_option_case()) {
    case kAvData:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          1, this->_internal_av_data(), deterministic, target);
      break;
    case kAParams:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          2, this->_internal_a_params(), deterministic, target);
      break;
    case kVParams:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          3, this->_internal_v_params(), deterministic, target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data_packet)
  return target;
}

size_t data_packet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:data_packet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  switch (data_option_case()) {
    // optional .av_packet av_data = 1;
    case kAvData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_option_.av_data_);
      break;
    }
    // optional .audio_params a_params = 2;
    case kAParams: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_option_.a_params_);
      break;
    }
    // optional .video_params v_params = 3;
    case kVParams: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_option_.v_params_);
      break;
    }
    case DATA_OPTION_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void data_packet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:data_packet)
  GOOGLE_DCHECK_NE(&from, this);
  const data_packet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const data_packet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:data_packet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:data_packet)
    MergeFrom(*source);
  }
}

void data_packet::MergeFrom(const data_packet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data_packet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.data_option_case()) {
    case kAvData: {
      mutable_av_data()->::av_packet::MergeFrom(from.av_data());
      break;
    }
    case kAParams: {
      mutable_a_params()->::audio_params::MergeFrom(from.a_params());
      break;
    }
    case kVParams: {
      mutable_v_params()->::video_params::MergeFrom(from.v_params());
      break;
    }
    case DATA_OPTION_NOT_SET: {
      break;
    }
  }
}

void data_packet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:data_packet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void data_packet::CopyFrom(const data_packet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data_packet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool data_packet::IsInitialized() const {
  switch (data_option_case()) {
    case kAvData: {
      if (has_av_data()) {
        if (!this->av_data().IsInitialized()) return false;
      }
      break;
    }
    case kAParams: {
      if (has_a_params()) {
        if (!this->a_params().IsInitialized()) return false;
      }
      break;
    }
    case kVParams: {
      if (has_v_params()) {
        if (!this->v_params().IsInitialized()) return false;
      }
      break;
    }
    case DATA_OPTION_NOT_SET: {
      break;
    }
  }
  return true;
}

void data_packet::Swap(data_packet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void data_packet::InternalSwap(data_packet* other) {
  using std::swap;
  swap(data_option_, other->data_option_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata data_packet::GetMetadata() const {
  protobuf_demuxer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_demuxer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::av_packet* Arena::CreateMaybeMessage< ::av_packet >(Arena* arena) {
  return Arena::CreateInternal< ::av_packet >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::video_params* Arena::CreateMaybeMessage< ::video_params >(Arena* arena) {
  return Arena::CreateInternal< ::video_params >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::audio_params* Arena::CreateMaybeMessage< ::audio_params >(Arena* arena) {
  return Arena::CreateInternal< ::audio_params >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::data_packet* Arena::CreateMaybeMessage< ::data_packet >(Arena* arena) {
  return Arena::CreateInternal< ::data_packet >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
